/*     
  set margin & padding to 0 because we don't want the browser to add anything itself. Clean slate
  border-box: changes the box model so that borders & padding are no longer added to total width & height 

  by setting a property to inherit over here, it means that any box-sizing that is specified by the main parent will be inherited. 
  ie: boz sizing in body to be inherited
*/
$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;
$color-grey-dark: #777;
$color-white: #fff;
$color-black: #000;

*,
*::after,
*::before {
	margin: 0;
	padding: 0;
	box-sizing: inherit;
}

/* Setting root font size  -> this also means that 1 rem is 10px
  However, setting overriding the browser root font-size to 10px makes it difficult for ppl with bad eyesight as they cannot manually adjust
  Better to assign a percentage
  ie: if we want 10px -> 10/16 (default) % => 62.5%
*/
html {
	font-size: 62.5%;
}

/*
  Anything related to font is usually specified in the body as that is inherited. Not in the universal selector above
  Anything applied to the body goes around the entire webpage - eg: padding
*/

body {
	font-family: "Lato", sans-serif;
	font-weight: 400;
	font-size: 16px;
	line-height: 1.7;
	color: $color-grey-dark;
	padding: 3rem;
	box-sizing: border-box;
}

/*cover ensures it will try to fit to whatever the view is  
  background-position top ensures that it will always stay at the top of the container. will crop out from the other parts as you resize
  clip-path allows us to clip the image we want by drawing a polygon for it. ie: specifying the x & y coordinates for each of the corners
  */

.header {
	height: 95vh;
	background-image: linear-gradient(
			to right bottom,
			rgba($color-primary-light, 0.801),
			rgba($color-primary-dark, 0.8)
		),
		url(../img/hero.jpg);
	background-size: cover;
	background-position: top;
	position: relative;
	clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

	/* the absolute position is always with reference to a parent container => set the position in the parent to relative */
	&__logo-box {
		position: absolute;
		top: 4rem;
		left: 4rem;
	}

	&__logo {
		height: 3.5rem;
	}

	/* so this is the box that encloses the heading elements. It needs to be in a specific place on the parent container
		So we use absolute. In order to position itself accurately, we use 50% to get it to 50% of parent, and then transform (as this is 
		relative to the element itself)
	*/
	&__text-box {
		position: absolute;
		top: 40%;
		left: 50%;
		transform: translate(-50%, -50%);
		text-align: center;
	}
}

/* 
  We have a h1 element with two bits of text that we want being at different sizes and above one another
  Use BLOCK element -> this occupies the entire width and ensures the two texts are not inline

  NB/ backface-visibility seems to fix issues with animations moving a little in a direction you didn't specifiy 
*/
.heading-primary {
	color: $color-white;
	text-transform: uppercase;
	backface-visibility: hidden;
	margin-bottom: 6rem;

	&--main {
		display: block;
		font-size: 6rem;
		font-weight: 400;
		letter-spacing: 3.5rem;
		animation-name: moveInLeft;
		animation-duration: 1s;
		animation-timing-function: ease-out;
		/*
		animation-iteration-count: 3;
		animation-delay: 3s;
		*/
	}

	&--sub {
		display: block;
		font-size: 2rem;
		font-weight: 700;
		letter-spacing: 1.75rem;
		animation: moveInRight 1s ease-out;
	}
}

/*
  CSS ANIMATIONS!
  Use the special keyword @ to start writing an animation. 

  The % { } describe what you will do when that % of animation is done
  
  Should stick to no more than 2 properties that change in animation. Browsers optimised for opacity and transform 

  Then you specify the animation name & duration for the elements that you want using them
*/

@keyframes moveInLeft {
	0% {
		opacity: 0;
		transform: translateX(-10rem);
	}

	80% {
		transform: translateX(1rem);
	}

	100% {
		opacity: 1;
		transform: translate(0);
	}
}

@keyframes moveInRight {
	0% {
		opacity: 0;
		transform: translateX(10rem);
	}

	80% {
		transform: translateX(-1rem);
	}

	100% {
		opacity: 1;
		transform: translate(0);
	}
}

/*
  psuedoclass -> : special state of a selector (in this case the button selector)
  visited state => the styling after the visitor has clicked on it (we want it to be the same for both here)
  
  if only specify two values for padding, first val is for top and bottom, and seconf for left and right
  text decoration ( default highlighting and uderlining)

  default display is inline. We want it to be inline-block => treated as text (so we can use text-align in parent container)

  transition is put in the .btn link version to indicate how much time for it to transition to any of the other button states
*/

.btn {
	&:link,
	&:visited {
		text-transform: uppercase;
		text-decoration: none;
		padding: 1.5rem 4rem;
		display: inline-block;
		border-radius: 10rem;
		transition: all 0.2s;
		position: relative;
		font-size: 1.6rem;
	}

	&:hover {
		transform: translateY(-0.3rem);
		box-shadow: 0 1rem 2rem rgba($color-black, 0.2);

		/* after psuedo element after the hover state 
			opacity 0 as we want it to disappear
		*/
		&::after {
			transform: scaleX(1.4) scaleY(1.6);
			opacity: 0;
		}
	}

	/* When we have clicked it */
	&:active {
		transform: translate(-0.1rem);
		box-shadow: 0 0.5rem 1rem rgba($color-black, 0.2);
	}

	&--white {
		background-color: $color-white;
		color: $color-grey-dark;

		&::after {
			background-color: $color-white;
		}
	}
	/*
		 we create a psuedo element that looks like the button which appears and then hides behind button after done. 
	
		 so we have create a psuedo element for "after"
		 the initial state of the after psuedo-element is &btn::after (ie: compared to hover, etc)
	 */
	&::after {
		content: "";
		display: inline-block;
		height: 100%;
		width: 100%;
		border-radius: 10rem;
		position: absolute;
		top: 0;
		left: 0;
		z-index: -1;
		transition: all 0.4s;
	}
}

@keyframes moveInBottom {
	0% {
		opacity: 0;
		transform: translateY(3rem);
	}

	100% {
		opacity: 1;
		transform: translate(0);
	}
}

/* animation-fill-mode backwards => all the styles that I had specified or moveInBottom at 0%, they will be applied */
.btn--animated {
	animation: moveInBottom 0.5 ease-out 0.75s;
	animation-fill-mode: backwards;
}
